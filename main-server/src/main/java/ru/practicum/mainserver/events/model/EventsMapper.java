package ru.practicum.mainserver.events.model;

import java.net.URLDecoder;
import java.nio.charset.StandardCharsets;
import java.time.LocalDateTime;

import static ru.practicum.mainserver.variables.GlobalVariables.FORMAT;

public class EventsMapper {
    public static Events toEvents(EventsFullDto dto) {
//        id integer generated by default as identity not null,
//                annotation varchar(255) not null,
//                category integer references category(id) not null ,
//                confirmedRequests integer,
//                createdOn TIMESTAMP,
//                description varchar(1000),
//                eventDate TIMESTAMP,
//                initiator integer references  users (id),
//                paid boolean default false,
//                participantLimit integer default (0),
//                publishedOn TIMESTAMP,
//                requestModeration boolean default true,
//                title varchar (100),
//                views integer,
//                lat real,
//                lon real,
//                state varchar (10)
        return Events.builder()
                .id(dto.getId())
                .annotation(dto.getAnnotation())
                .category(dto.getCategory().getId())
                .confirmedRequests(dto.getConfirmedRequests())
                .createdOn(LocalDateTime.parse(URLDecoder.decode(dto.getCreatedOn(), StandardCharsets.UTF_8), FORMAT))
                .description(dto.getDescription())
                .eventDate(LocalDateTime.parse(URLDecoder.decode(dto.getEventDate(), StandardCharsets.UTF_8), FORMAT))
  //              .initiator(dto.getInitiator())
                .paid(dto.getPaid())
                .participantLimit(dto.getParticipantLimit())
                .publishedOn(LocalDateTime.parse(URLDecoder.decode(dto.getPublishedOn(), StandardCharsets.UTF_8), FORMAT))
                .requestModeration(dto.getRequestModeration())
                .title(dto.getTitle())
                .views(dto.getViews())
                .lat(dto.getLocation().getLat())
                .lon(dto.getLocation().getLon())
                .state(dto.getState())
                .build();
    }

    public static EventsFullDto toEventsFullDto(Events events) {
        return EventsFullDto.builder().build();
    }
}
